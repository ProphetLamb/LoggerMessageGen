# Shared editor configuration <https://editorconfig.org>

# This is the top-most EditorConfig file which should apply to files below
root = true

[*]
charset = utf-8
# https://github.com/pharring/EditorGuidelines#editorconfig-support-vs-2017-and-vs-2019-only
guidelines = 80, 100, 120
insert_final_newline = true
trim_trailing_whitespace = true
indent_style = space
end_of_line = lf

[*.cs]
# Configure language and formatting conventions to match analyzer rules below
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-formatting-conventions
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-language-conventions
# Always use C# 10 file scoped namespace, as it makes code much cleaner in the texteditor.
# Disallow multiple namespaces in a single file.
csharp_style_namespace_declarations = file_scoped:error
csharp_using_directive_placement = outside_namespace:warning
# No unsued using directives, to prevent clutter.
dotnet_code_quality_unused_parameters = non_public:warning
# Group by root namespace to seperate packages.
dotnet_separate_import_directive_groups = true
# Looks nicer
dotnet_sort_system_directives_first = true
# Note: qualification style matches SA1101/SX1101 rules below.
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_property = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_event = false:warning

# Prefered body style
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = true:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_lambdas = true:none
csharp_style_expression_bodied_local_functions = when_on_single_line:silent

dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_auto_properties = false:silent
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_namespace_match_folder = true:suggestion
dotnet_style_operator_placement_when_wrapping = beginning_of_line
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_style_expression_bodied_operators=when_on_single_line
dotnet_style_predefined_type_for_locals_parameters_members = true
dotnet_style_predefined_type_for_member_access = false:warning
dotnet_style_require_accessibility_modifiers = always:error
csharp_indent_labels = one_less_than_current
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_prefer_simple_using_statement = true:suggestion
# Indent is more obious when formatting agnostic.
csharp_prefer_braces = true:silent
# Clean up clutter and make core more readable.
csharp_style_implicit_object_creation_when_type_is_apparent=true
# Logic is invalid for structs that self assign, the rule does not account for that.
dotnet_style_readonly_field = false
# The rule does not account for fluent builders.
csharp_style_unused_value_expression_statement_preference=unused_local_variable:none
# The syntax is not compatible with netstandard2.0 and produces spagetti code.
csharp_style_prefer_range_operator=false:suggestion

## Configure Roslyn Analyzers
## https://docs.microsoft.com/en-us/visualstudio/code-quality/use-roslyn-analyzers#set-rule-severity-in-an-editorconfig-file

# Enable all diagnostics at warning level by default
dotnet_analyzer_diagnostic.severity = warning

# Enable code quality checks for code with any visibility
dotnet_code_quality.api_surface = all

# Note: dotnet_analyzer_diagnostic.severity should not apply to compiler
# diagnostics (e.g. IDE*) but does in Visual Studio 16.5 due to
# https://github.com/dotnet/roslyn/issues/42116 so several default levels are
# configured below to revert the change resulting from this issue.
#
# Note: Compiler diagnostics (e.g. IDE*) are only analyzed during build with
# VS2019 16.8 Preview4 or later and .NET5 RC2 SDK or later:
# https://github.com/dotnet/roslyn/issues/33558#issuecomment-690347050

# Hasflag performs a type and size check, this is undesirable.
roslynator_enum_has_flag_style = operator

# Suggest "Avoid excessive class coupling"
# Broken https://github.com/dotnet/roslyn-analyzers/issues/2133
dotnet_diagnostic.CA1506.severity = suggestion
# Suggest "Avoid Dead Conditional Code"
# Broken https://github.com/dotnet/roslyn-analyzers/issues/2180
dotnet_diagnostic.CA1508.severity = suggestion
# Enable "Identifiers should differ by more than case" for public and internal
# Having the private backing field for a property differ in case only is
# common, satisfies capitalization conventions, and retains clarity.
# To allow this, exclude private API surfaces from CA1708.
dotnet_code_quality.CA1708.api_surface = public, internal
# Allow generic type parameters such as O, K, or V
dotnet_code_quality.CA1715.exclude_single_letter_type_parameters = true
# Suggest "Prefer jagged arrays over multidimensional"
# Multidimensional should use less memory (lack of indirection), rows are
# contiguous in memory, and squareness is enforced.  Performance can vary.
# https://stackoverflow.com/q/597720 (See .NET Core answers downthread)
# Which is preferable depends on tradeoffs of specific use cases.
dotnet_diagnostic.CA1814.severity = suggestion
# Disable "Prefer 'X' over 'Y' when span-based overloads are available"
# TODO: Enable when dropping support for .NET Standard 2.0
dotnet_diagnostic.CA1846.severity = none
# Suggest "Dispose objects before losing scope"
# Broken https://github.com/dotnet/roslyn-analyzers/issues/2949
# https://github.com/dotnet/roslyn-analyzers/issues/2936
dotnet_diagnostic.CA2000.severity = suggestion
# Suggest "Assemblies should have valid strong names"
# The value of strong names is dubious.  See:
# https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/strong-name-signing.md
# https://github.com/angularsen/UnitsNet/issues/135
dotnet_diagnostic.CA2210.severity = suggestion
# Enable heuristic detection from "string format, params object[]" arguments
# See: https://github.com/dotnet/roslyn-analyzers/pull/3653
dotnet_code_quality.CA2241.try_determine_additional_string_formatting_methods_automatically = true
# Ignore "Use explicit type instead of 'var'"
dotnet_diagnostic.IDE0008.severity = silent
# Ignore "Use block body for methods"
dotnet_diagnostic.IDE0022.severity = silent
# Suggest "'if' statement can be simplified"
dotnet_diagnostic.IDE0045.severity = suggestion
# Suggest "'if' statement can be simplified"
dotnet_diagnostic.IDE0046.severity = suggestion
# Suggest "Expression value is never used"
# Note: I want to use this, but fluent interfaces (StringBuilder, OptionSet)
# make it too painful.  Need something more like MustUseReturnValue.
# https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#MustUseReturnValueAttribute
dotnet_diagnostic.IDE0058.severity = suggestion
# Disable "Using directives must be placed outside of a namespace declaration"
dotnet_diagnostic.IDE0065.severity = none
# Suggest "Use pattern matching"
# Sometimes it makes the code cleaner, sometimes it doesn't.
dotnet_diagnostic.IDE0078.severity = suggestion
# Disable "Add accessibility modifiers."
# Redundant with IDE0040 and SA1400
dotnet_diagnostic.RCS1018.severity = none
# Disable "Remove redundant empty line"
# Redundant with SA1507
dotnet_diagnostic.RCS1036.severity = none
# Suggest "Remove 'partial' modifier from type with a single part"
# This may be done intentionally to allow future extension.
dotnet_diagnostic.RCS1043.severity = suggestion
# Disable "Remove unnecessary case label"
# Conflicts with IDE0010 "Populate switch"
# I'd prefer to be more explicit about cases.
dotnet_diagnostic.RCS1069.severity = none
# Disable "Use --/++ operator instead of assignment"
# I find the more explicit assignment preferable most of the time.
dotnet_diagnostic.RCS1089.severity = none
dotnet_diagnostic.RCS1089FadeOut.severity = none
# Disable "Call 'ConfigureAwait(false)."
# Redundant with CA2007
dotnet_diagnostic.RCS1090.severity = none
# Suggest "Mark local variable as const"
# The cost/benefit of adding "const" to local variables is low.
# It's noisy and unlikely to result in different (optimized) codegen.
# Worth enabling if "const" could be used in place of type:
# https://github.com/dotnet/csharplang/issues/106
# https://github.com/dotnet/csharplang/issues/188
dotnet_diagnostic.RCS1118.severity = suggestion
# Suggest "Inline local variable."
# Often a local variable makes the code more easily readable/understandable.
dotnet_diagnostic.RCS1124.severity = suggestion
dotnet_diagnostic.RCS1124FadeOut.severity = silent
# Disable "Add summary element to documentation comment."
# Redundant with CS1591
# False-positive for partial classes (<summary> should only be on one)
dotnet_diagnostic.RCS1139.severity = none
# Disable "Add 'param' element to documentation comment."
# Redundant with CS1573
dotnet_diagnostic.RCS1141.severity = none
# Suggest "Use conditional access"
# Sometimes conditional access is more readable, sometimes it is not.
dotnet_diagnostic.RCS1146.severity = suggestion
# Suggest "Enum should declare explicit values."
# I'm not convinced this is useful in all cases.  Suggest rather than warn.
dotnet_diagnostic.RCS1161.severity = suggestion
# Suggest "Unused parameter '{0}'"
# Warns about lambda expressions, where parameter can't be removed
# https://github.com/JosefPihrt/Roslynator/issues/400#issuecomment-415805957
# Changing param name to _ would remove useful information
dotnet_diagnostic.RCS1163.severity = suggestion
# Disable "Unconstrained type parameter checked for null."
# Logic which applies to null often does not apply to non-null default.
dotnet_diagnostic.RCS1165.severity = none
# RCS1169: Make field read-only
# Logic is invalid for structs that self assign, the rule does not account for that.
dotnet_diagnostic.RCS1169.severity = none
# Disable "Use 'return' instead of assignment"
# Whether early return is preferable depends on other factors such as whether
# additional pre-return use/assignment of the variable is likely to be added
# and how the function reads.  Enforcing a general rule is counter-productive.
dotnet_diagnostic.RCS1179.severity = none
# Suggest "Convert comment to documentation comment."
# Comments above fields are not necessarily suitable for field xmldoc.
dotnet_diagnostic.RCS1181.severity = suggestion
# Disable "Format initializer with single expression on single line"
# Minimize diff for adding/removing by keeping each value on its own line.
dotnet_diagnostic.RCS1183.severity = none
# Suggest "Join string expressions."
# Often strings are split for line length or logic-related reasons.
dotnet_diagnostic.RCS1190.severity = suggestion
# Ignore "Use regular string literal instead of verbatim string literal"
# Using verbatim strings consistently (e.g. alignment, regex contexts) is good.
dotnet_diagnostic.RCS1192.severity = silent
# Disable "Implement exception constructors."
# Redundant with CA1032
dotnet_diagnostic.RCS1194.severity = none
# Suggest "Use method chaining."
# Use whichever seems appropriate for code readability/comprehensibility.
dotnet_diagnostic.RCS1201.severity = suggestion
# Disable "Remove unused method declaration."
# Redundant with IDE0051
dotnet_diagnostic.RCS1213.severity = none
# Ignore "Avoid nested ?: operators."
# If the cases are simple and well-formatted, nesting can be preferable
dotnet_diagnostic.RCS1238.severity = silent
# Disable "Use implicit/explicit object creation"
# Redundant with IDE0090
dotnet_diagnostic.RCS1250.severity = none
# Disable "'{0}' should not be thrown by user code."
# Redundant with CA2201
dotnet_diagnostic.S112.severity = none
# Disable "Remove the unused private method '{0}'."
# Redundant with RCS1213, which doesn't gray+underline the entire method
dotnet_diagnostic.S1144.severity = none
# Disable "Redundant casts should not be used"
# Doesn't consider nullability
# https://github.com/SonarSource/sonar-dotnet/issues/3273
#dotnet_diagnostic.S1905.severity = none
# Disable "Extract this nested ternary operation into an independent statement."
dotnet_diagnostic.S3358.severity = none
# Disable "Exception types should be \"public\""
# Redundant with CA1064
dotnet_diagnostic.S3871.severity = none
# Disable "Do not call 'GC.SuppressFinalize'."
# Redundant with CA1816
# Note: Also reports https://github.com/dotnet/roslyn-analyzers/issues/3675
dotnet_diagnostic.S3971.severity = none
# Suggest "Field names should not use Hungarian notation"
# Too many false-positives
dotnet_diagnostic.SA1305.severity = suggestion
# Disable "Store files as UTF-8 with byte order mark"
# Prefer UTF-8 without BOM
dotnet_diagnostic.SA1412.severity = none
# Ignore "Property documentation should have value"
# Documenting property value is usually redundant
dotnet_diagnostic.SA1609.severity = silent
# Ignore "File header should have summary"
# Purpose of file is usually self-evident (and documented by class doc)
dotnet_diagnostic.SA1639.severity = silent
# Disable "Do not prefix local calls with 'this.'"
dotnet_diagnostic.SX1101.severity = none
# Disable "Field names should begin with underscore"
# Don't want to use underscore for field names
dotnet_diagnostic.SX1309.severity = none
# Disable "Field names should begin with underscore" for static fields
# Don't want to use underscore for static field names
dotnet_diagnostic.SX1309S.severity = none
# Suggest "Use auto-implemented property"
dotnet_diagnostic.RCS1085.severity = none
# S2178: Short-circuit logic should be used in boolean contexts
dotnet_diagnostic.S2178.severity = none
# RCS1233: Use short-circuiting operator.
dotnet_diagnostic.RCS1233.serverity = none
# CA1051:  Do not declare visible instance fields.
# For publicly exposed members this rule is sensible, but for protected fields that should be assignable by the inheritor,
# and internal structs specifically this rule should not apply.
dotnet_diagnostic.CA1051.severity = suggestion
# CA1710: Collection interface should end with 'Collection'
dotnet_diagnostic.CA1710.severity = none

## Diagnostics which are too noisy during initial development, but useful later
# FIXME: CA1573/1591 duplicated with <NoWarn> in .csproj for old VS
# Suggest "Do not pass literals as localized parameters"
dotnet_diagnostic.CA1303.severity = suggestion
# Suggest "Parameter has no matching param tag in the XML comment"
dotnet_diagnostic.CS1573.severity = suggestion
# Suggest "Missing XML comment for publicly visible type or member"
dotnet_diagnostic.CS1591.severity = suggestion
# Suggest "Add exception to documentation comment."
# This is quite noisy for ArgumentException/ArgumentNullException already
# indicated by type/nullability and likely <param>.
dotnet_diagnostic.RCS1140.severity = suggestion
# Suggest "Take the required action to fix the issue indicated by this 'FIXME' comment."
dotnet_diagnostic.S1134.severity = suggestion
# Suggest "Complete the task associated to this 'TODO' comment."
dotnet_diagnostic.S1135.severity = suggestion
# Suggest "Split this method into two, one handling parameters check and the other handling the asynchronous code."
# There are differing opinions about whether parameter errors should be thrown
# or returned in a faulted task.  S4457 advocates throwing.  David Fowler
# advocates returning a faulted task:
# https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md#prefer-asyncawait-over-directly-returning-task
# During early development, the work to split async methods is not justified.
# Prior to release, consider enforcing an approach consistently.
dotnet_diagnostic.S4457.severity = suggestion
# Suggest "Elements must be documented"
dotnet_diagnostic.SA1600.severity = suggestion
# Suggest "Partial elements must be documented"
dotnet_diagnostic.SA1601.severity = suggestion
# CA1000: Do not declare static members on generic types
dotnet_diagnostic.CA1000.severity = none
# Add missing cases to switch expression
dotnet_diagnostic.IDE0072.severity = silent
# CA1822: Mark members as static
dotnet_diagnostic.CA1822.severity = silent

[*.{cs,vb}]

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

# Naming styles

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix =
dotnet_naming_style.begins_with_i.word_separator =
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.word_separator =
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.word_separator =
dotnet_naming_style.pascal_case.capitalization = pascal_case


[*.{cs,ps1,vb}]
indent_size = 4


[*.{config,cshtml,csproj,html,props,targets,xml}]
indent_size = 2


[*.{css,js,json,jsx,scss,ts,tsx,yaml,yml}]
indent_size = 2
